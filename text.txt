#pragma once

#include <iostream>
#include <string>
#include <limits>
#include "clsDate.h"


class clsInputValidate {
public:
    static bool isNumberBetween(short Number, short From, short To){
        return (Number >= From && Number <= To);
    }
    static bool isNumberBetween(int Number, int From, int To){
        return (Number >= From && Number <= To);
    }
    static bool isNumberBetween(float Number, float From, float To){
        return (Number >= From && Number <= To);
    }
    static bool isNumberBetween(double Number, double From, double To){
        return (Number >= From && Number <= To);
    }

    // ===================================================================

    static bool isDateBetween(clsDate Date, clsDate DateFrom, clsDate DateTo){
        return (
                clsDate::isDate1AfterDate2(Date, DateFrom)
                &&
                clsDate::isDate1BeforeDate2(Date, DateTo)
                ) || (
                clsDate::isDate1AfterDate2(Date, DateTo)
                &&
                clsDate::isDate1BeforeDate2(Date, DateFrom)
                );
    }
    // ===================================================================

    static short ReadShortNumber(std::string ErrorMessage="Invalid Number, Enter again\n"){
        short Number;
        while (!(std::cin >> Number)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            std::cout << ErrorMessage;
        }
        return Number;
    }
    static short ReadShortNumberBetween(
            short From, short To, std::string ErrorMessage="Number is not within range, Enter again:\n")
    {
        short Number = ReadShortNumber();
        while (!isNumberBetween(Number, From, To)){
            std::cout << ErrorMessage;
            Number = ReadShortNumber();
        }
        return Number;
    }

    // ===================================================================

    static int ReadIntNumber(std::string ErrorMessage="Invalid Number, Enter again\n"){
        int Number;
        while (!(std::cin >> Number)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            std::cout << ErrorMessage;
        }
        return Number;
    }
    static int ReadIntNumberBetween(
            int From, int To, std::string ErrorMessage="Number is not within range, Enter again:\n")
    {
        int Number = ReadIntNumber();
        while (!isNumberBetween(Number, From, To)){
            std::cout << ErrorMessage;
            Number = ReadIntNumber();
        }
        return Number;
    }
    // ======================================================================

    static float ReadFloatNumber(std::string ErrorMessage="Invalid Number, Enter again\n") {
        float Number;

        while (!(std::cin >> Number)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            std::cout << ErrorMessage;
        }
        return Number;
    }
    static float ReadFloatNumberBetween(
        float From, float To, std::string ErrorMessage="Number is not within range, Enter again:\n")
    {
        float Number = ReadFloatNumber();
        while (!isNumberBetween(Number, From, To)){
            std::cout << ErrorMessage;
            Number = ReadFloatNumber();
        }
        return Number;
    }

    // ======================================================================

    static double ReadDblNumber(std::string ErrorMessage="Invalid Number, Enter again\n"){
        double Number;
        while (!(std::cin >> Number)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            std::cout << ErrorMessage;
        }
        return Number;
    }
    static double ReadDblNumberBetween(
            double From, double To, std::string ErrorMessage="Number is not within range, Enter again:\n"){

        double Number = ReadDblNumber();
        while (!isNumberBetween(Number, From, To)){
            std::cout << ErrorMessage;
            Number = ReadDblNumber();
        }
        return Number;
    }

    // =======================================================================

    static bool isValidDate(clsDate Date){
        return clsDate::isValidDate(Date);
    }

    // ========================================================================

    static std::string ReadString() {
        std::string S1;
        getline(std::cin>>std::ws, S1);
        return S1;
    }

};